#!/bin/bash

export PATH="$HOME/.local/bin:$PATH"

menu() {
  local prompt="$1"
  local options="$2"

  echo -e "$options" | rofi -dmenu -theme "$ROFI_DIR/dmenu.rasi" -i -mesg "$prompt…" "${args[@]}"
}

# terminal displays an informative window
terminal() {
    alacritty --class Informative -e "$@"
}

# xlInfoTerminal creates a full window
xlInfoTerminal() {
    alacritty --class FullInformative -e "$@"
}

show_package_menu() {
  case $(menu "Package" "✅ Install Package\n❌ Remove Package\n Update System\n✅ Install WebApp\n❌ Remove WebApp\n Back") in
  *Install*Package*) terminal pkg-install ;;
  *Remove*Package*) terminal pkg-remove ;;
  *Update*System*) terminal yay -Syu --noconfirm ;;
  *Install*WebApp*) terminal webapp-install ;;
  *Remove*WebApp*) terminal webapp-remove ;;
  *Back*) show_main_menu ;;
  *) ;;
  esac
}

show_screenshot_menu() {
  case $(menu "Screenshot" "🔳 Region\n🪟 Window\n🖥️ Display\n Back") in
  *Region*) hyprshot -m region ;;
  *Window*) hyprshot -m window ;;
  *Display*) hyprshot -m output ;;
  *Back*) show_main_menu ;;
  *) ;;
  esac
}

show_system_menu() {
    case $(menu "System" " Resources\n󰜉 Reload\n Back") in
  *Resources*) terminal htop ;;
  *Reload*) reload ;;
  *Back*) show_main_menu ;;
  *) ;;
  esac
}

show_power_menu() {
  case $(menu "Power" " Lock\n󰤄 Suspend\n󰜉 Restart\n󰐥 Shutdown\n Back") in
  *Lock*) loginctl lock-session ;;
  *Suspend*) systemctl suspend ;;
  *Restart*) systemctl reboot ;;
  *Shutdown*) systemctl poweroff ;;
  *Back*) show_main_menu ;;
  *) ;;
  esac
}
show_devhints_cheatsheet() {
    local cheatsheet_name=$(curl -s https://devhints.io/ | \
        grep -oP '(?<=<code class="slug">)[^<]+' | \
        rofi -dmenu -theme "$ROFI_DIR/dmenu.rasi" -i -p "Select a cheatsheet:")

    if [[ -n "$cheatsheet_name" ]]; then
        webapp-launch "https://devhints.io/${cheatsheet_name}"
    fi
}

show_learn_menu() {
  case $(menu "Learn" "  Keybindings\n  Hyprland\n󰣇  Arch\n󰣇  Arch Wiki Offline\n Font Awesome\n Hyprpanel Modules\n Back") in
  *Keybindings*) hyprland-keybinds ;;
  *Hyprland*) webapp-launch "https://wiki.hypr.land/" ;;
  *Arch*Wiki*Offline*) brave "file:///usr/share/doc/arch-wiki/html/en/Main_page.html" ;;
  *Arch*) webapp-launch "https://wiki.archlinux.org/title/Main_page" ;;
  *Font*Awesome*) webapp-launch "https://fontawesome.com/search?o=r" ;;
  *Hyprpanel*Modules*) webapp-launch "https://hyprpanel.com/configuration/modules.html" ;;
  *Back*) show_main_menu ;;
  *) ;;
  esac
}

show_news_menu(){
  case $(menu "News" "📈 Stocks\n Back") in
  *Stocks*) xlInfoTerminal ticker --config ~/.ticker.yaml ;;
  *Back*) show_main_menu ;;
  *) ;;
  esac
}

show_k8s_menu() {
    case $(menu "Kubernetes" "\n Back") in
  *Back*) show_dev_menu ;;
  *) ;;
  esac
}

show_kind_menu() {
  case $(menu "Kind" "+ Create\n Delete\n Assume Context\n Back") in
  *Create*) terminal kind create cluster ;;
  *Delete*) terminal kind delete cluster ;;
  *Assume*Context*) terminal kubectl config set-context kind-kind ;;
  *Back*) show_main_menu ;;
  *) ;;
  esac
}

show_minikube_menu() {
  case $(menu "Minikube" "+ Create\n Delete\n Assume Context\n Back") in
  *Create*) terminal minikube start ;;
  *Delete*) terminal minikube delete ;;
  *Assume*Context*) terminal minikube update-context ;;
  *Back*) show_dev_menu ;;
  *) ;;
  esac
}

show_ops_menu() {
    case $(menu "Ops" "\n Back") in
  *Back*) show_main_menu ;;
  *) ;;
  esac
}

show_systemd_menu() {
    case $(menu "Systemd" "🟢 Start Service\n🔁 Restart Service\n🛑 Stop Service\n✅ Enable Service\n❌ Disable Service\n View System Logs\nℹ️ Get Status\n Back") in
    *Start*Service*)
        local service_to_start=$(list_services)
        if [[ -n "$service_to_start" ]]; then
            terminal sudo systemctl start "$service_to_start"
        fi
        ;;
    *Restart*Service*)
        local service_to_restart=$(list_services)
        if [[ -n "$service_to_restart" ]]; then
            terminal sudo systemctl restart "$service_to_restart"
        fi
        ;;
    *Stop*Service*)
        local service_to_stop=$(list_services)
        if [[ -n "$service_to_stop" ]]; then
            terminal sudo systemctl stop "$service_to_stop"
        fi
        ;;
    *Enable*Service*)
        local service_to_enable=$(list_services)
        if [[ -n "$service_to_enable" ]]; then
            terminal sudo systemctl enable "$service_to_enable"
        fi
        ;;
    *Disable*Service*)
        local service_to_disable=$(list_services)
        if [[ -n "$service_to_disable" ]]; then
            terminal sudo systemctl disable "$service_to_disable"
        fi
        ;;
    *View*System*Logs*)
        # Opens a new terminal to view live system logs
        terminal sudo journalctl -f -q -b
        ;;
    *Get*Status*)
        local service_to_check=$(list_services)
        if [[ -n "$service_to_check" ]]; then
            terminal systemctl status "$service_to_check"
        fi
        ;;
    *Back*) show_main_menu ;;
    *) ;;
    esac
}

list_services() {
    systemctl list-units --type=service --no-legend --no-pager | awk '{print $1}' | grep -Ev '.slice|.mount|@' | rofi -dmenu -theme "$ROFI_DIR/dmenu.rasi" -i -p "Select a service:"
}

show_dev_menu() {
    case $(menu "Dev" "📖 Conventional Commits\n📖 Kubernetes Docs\n☁️ Terraform Docs\n📜 Devhints Cheatsheet\n Kubernetes (WIP)\n Kind\n Minikube\n Back") in
  *Conventional*Commits*) webapp-launch "https://www.conventionalcommits.org/en/v1.0.0/" ;;
  *Kubernetes*Docs*) webapp-launch "https://kubernetes.io/docs/home/" ;;
  *Terraform*Docs*) webapp-launch "https://www.terraform.io/docs/" ;;
  *Devhints*Cheatsheet*) show_devhints_cheatsheet ;;
  *Kubernetes*) show_k8s_menu ;;
  *Kind*) show_kind_menu ;;
  *Minikube*) show_minikube_menu ;;
  *Back*) show_main_menu ;;
  *) ;;
  esac
}

show_ai_menu() {
  source ~/.zsh_secrets
  case $(menu "AI" "🧠 Ask Gemini\n Back") in
  *Ask*Gemini*) terminal gemini ;;
  *Back*) show_main_menu ;;
  *) ;;
  esac
}

# 🖥️ Ops (WIP)
show_main_menu() {
  go_to_menu "$(menu "Go" "󰀻 Apps\n😀 Emoji\n💾 Package Management\n📚 Learn\n📷 Screenshot\n📰 News\n  System\n Systemd\n⚡ Power\n💻 Development\n🤖 AI\nℹ️ About")"
}

go_to_menu() {
  case "${1,,}" in
  *apps*) rofi -show drun ;;
  *emoji*) hyprland-emoji ;;
  *package*management*) show_package_menu ;;
  *learn*) show_learn_menu ;;
  *screenshot*) show_screenshot_menu ;;
  *news*) show_news_menu ;;
  *systemd*) show_systemd_menu ;;
  *system*) show_system_menu ;;
  *power*) show_power_menu ;;
  *ops*) show_ops_menu ;;
  *development*) show_dev_menu ;;
  *ai*) show_ai_menu ;;
  *about*) terminal zsh -c 'fastfetch; read -n 1 -s' ;;
  esac
}

if [[ -n "$1" ]]; then
  go_to_menu "$1"
else
  show_main_menu
fi
